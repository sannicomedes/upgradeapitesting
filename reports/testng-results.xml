<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="13" passed="12">
  <reporter-output>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] Status Code is 200]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] States List is valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] AlabamaState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] AlaskaState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] ArizonaState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] ArkansasState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] CaliforniaState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] ConnecticutState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] DelawareState is Valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] District of ColumbiaState is NOT Valid. Thus, State List is invalid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] 48 is the Total of names in the States List]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:19 -03:00] Status Code is 200]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:19 -03:00] States List is valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:19 -03:00] Alabama has 19 as a minimun age]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:20 -03:00] Status Code is 200]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:20 -03:00] States List is valid]]>
    </line>
    <line>
      <![CDATA[[INFO 02-05-2019 19:18:20 -03:00] Georgia has $3005 as a minimun loan requirement]]>
    </line>
  </reporter-output>
  <suite name="Upgrade QA Coding API" duration-ms="6971" started-at="2019-02-05T22:18:13Z" finished-at="2019-02-05T22:18:20Z">
    <groups>
    </groups>
    <test name="Retrieve State List and Total Number of Names" duration-ms="4061" started-at="2019-02-05T22:18:13Z" finished-at="2019-02-05T22:18:17Z">
      <class name="com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest">
        <test-method status="PASS" signature="getStatesList()[pri:0, instance:com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest@6a024a67]" name="getStatesList" duration-ms="3114" started-at="2019-02-05T22:18:13Z" description="Get States List" finished-at="2019-02-05T22:18:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getStatesList -->
        <test-method status="PASS" signature="checkStatusCode()[pri:1, instance:com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest@6a024a67]" name="checkStatusCode" duration-ms="108" started-at="2019-02-05T22:18:17Z" description="Status Code" finished-at="2019-02-05T22:18:17Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] Status Code is 200]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkStatusCode -->
        <test-method status="PASS" signature="checkSchema()[pri:2, instance:com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest@6a024a67]" name="checkSchema" duration-ms="449" started-at="2019-02-05T22:18:17Z" description="Response Validation against Schema" finished-at="2019-02-05T22:18:17Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] States List is valid]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkSchema -->
        <test-method status="FAIL" signature="checkAllStateNamesAreValid()[pri:3, instance:com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest@6a024a67]" name="checkAllStateNamesAreValid" duration-ms="344" started-at="2019-02-05T22:18:17Z" description="State Names Validation" finished-at="2019-02-05T22:18:17Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest.checkAllStateNamesAreValid(VerifyAllStateNamesAreValidTest.java:25)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72)
at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] AlabamaState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] AlaskaState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] ArizonaState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] ArkansasState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] CaliforniaState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] ConnecticutState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] DelawareState is Valid]]>
            </line>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] District of ColumbiaState is NOT Valid. Thus, State List is invalid]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkAllStateNamesAreValid -->
        <test-method status="PASS" signature="checkTotalStateCount()[pri:4, instance:com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest@6a024a67]" name="checkTotalStateCount" duration-ms="15" started-at="2019-02-05T22:18:17Z" description="States Count" finished-at="2019-02-05T22:18:17Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:17 -03:00] 48 is the Total of names in the States List]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkTotalStateCount -->
      </class> <!-- com.upgrade.UpgradeAPITesting.tests.VerifyAllStateNamesAreValidTest -->
    </test> <!-- Retrieve State List and Total Number of Names -->
    <test name="Only One State with a minimun Age of 19" duration-ms="1411" started-at="2019-02-05T22:18:17Z" finished-at="2019-02-05T22:18:19Z">
      <class name="com.upgrade.UpgradeAPITesting.tests.VerifyMinAgeTest">
        <test-method status="PASS" signature="getStatesList()[pri:0, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinAgeTest@5034c75a]" name="getStatesList" duration-ms="1339" started-at="2019-02-05T22:18:17Z" description="Get States List" finished-at="2019-02-05T22:18:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getStatesList -->
        <test-method status="PASS" signature="checkStatusCode()[pri:1, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinAgeTest@5034c75a]" name="checkStatusCode" duration-ms="0" started-at="2019-02-05T22:18:19Z" description="Status Code" finished-at="2019-02-05T22:18:19Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:19 -03:00] Status Code is 200]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkStatusCode -->
        <test-method status="PASS" signature="checkSchema()[pri:2, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinAgeTest@5034c75a]" name="checkSchema" duration-ms="34" started-at="2019-02-05T22:18:19Z" description="Response Validation against Schema" finished-at="2019-02-05T22:18:19Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:19 -03:00] States List is valid]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkSchema -->
        <test-method status="PASS" signature="checkMinAge()[pri:3, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinAgeTest@5034c75a]" name="checkMinAge" duration-ms="36" started-at="2019-02-05T22:18:19Z" description="Minimun Age 19" finished-at="2019-02-05T22:18:19Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:19 -03:00] Alabama has 19 as a minimun age]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkMinAge -->
      </class> <!-- com.upgrade.UpgradeAPITesting.tests.VerifyMinAgeTest -->
    </test> <!-- Only One State with a minimun Age of 19 -->
    <test name="Only One State with minimun Loan Amount" duration-ms="1394" started-at="2019-02-05T22:18:19Z" finished-at="2019-02-05T22:18:20Z">
      <class name="com.upgrade.UpgradeAPITesting.tests.VerifyMinLoanTest">
        <test-method status="PASS" signature="getStatesList()[pri:0, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinLoanTest@58651fd0]" name="getStatesList" duration-ms="1347" started-at="2019-02-05T22:18:19Z" description="Get States List" finished-at="2019-02-05T22:18:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getStatesList -->
        <test-method status="PASS" signature="checkStatusCode()[pri:1, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinLoanTest@58651fd0]" name="checkStatusCode" duration-ms="0" started-at="2019-02-05T22:18:20Z" description="Status Code" finished-at="2019-02-05T22:18:20Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:20 -03:00] Status Code is 200]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkStatusCode -->
        <test-method status="PASS" signature="checkSchema()[pri:2, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinLoanTest@58651fd0]" name="checkSchema" duration-ms="31" started-at="2019-02-05T22:18:20Z" description="Response Validation against Schema" finished-at="2019-02-05T22:18:20Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:20 -03:00] States List is valid]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkSchema -->
        <test-method status="PASS" signature="checkMinLoan()[pri:3, instance:com.upgrade.UpgradeAPITesting.tests.VerifyMinLoanTest@58651fd0]" name="checkMinLoan" duration-ms="16" started-at="2019-02-05T22:18:20Z" description="Minimun Loan Requirement as $3005" finished-at="2019-02-05T22:18:20Z">
          <reporter-output>
            <line>
              <![CDATA[[INFO 02-05-2019 19:18:20 -03:00] Georgia has $3005 as a minimun loan requirement]]>
            </line>
          </reporter-output>
        </test-method> <!-- checkMinLoan -->
      </class> <!-- com.upgrade.UpgradeAPITesting.tests.VerifyMinLoanTest -->
    </test> <!-- Only One State with minimun Loan Amount -->
  </suite> <!-- Upgrade QA Coding API -->
</testng-results>
